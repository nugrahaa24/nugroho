name: Mpragans RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: winka
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          # Enable Remote Desktop (allow connections)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                            -Name "fDenyTSConnections" -Value 0 -Force

          # Optionally relax NLA/SecurityLayer if needed
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                            -Name "SecurityLayer" -Value 0 -Force

          # Ensure firewall rule for RDP exists
          try {
              netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
          } catch {}
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force
          Start-Sleep -Seconds 3

      - name: Create RDP User (bypass password policy: net user + fallback disable complexity)
        shell: pwsh
        run: |
          $username = "Mpragans"
          $plainPass = "123456"

          Write-Host "Attempting to create/update user via 'net user' (preferred bypass)."

          # Helper function to add or update user via net user
          function Ensure-NetUser {
              param($u, $p)
              $exists = (net user $u) -match $u
              if ($exists) {
                  Write-Host "User $u exists â€” updating password."
                  net user $u $p
                  if ($LASTEXITCODE -ne 0) { return $false }
              } else {
                  Write-Host "Creating user $u via net user."
                  net user $u $p /add
                  if ($LASTEXITCODE -ne 0) { return $false }
              }
              return $true
          }

          $ok = Ensure-NetUser -u $username -p $plainPass

          if (-not $ok) {
              Write-Warning "net user creation/update failed. Trying to disable password complexity policy and retry."

              # Export current security policy, modify PasswordComplexity = 1 -> 0, then re-import
              $cfg = "$env:TEMP\secpol_${env:GITHUB_RUN_ID}.cfg"
              secedit /export /cfg $cfg | Out-Null
              if (Test-Path $cfg) {
                  $content = Get-Content $cfg -Raw
                  if ($content -match "PasswordComplexity\s*=\s*1") {
                      $content = $content -replace "PasswordComplexity\s*=\s*1", "PasswordComplexity = 0"
                      Set-Content -LiteralPath $cfg -Value $content
                      secedit /configure /db $env:windir\security\local.sdb /cfg $cfg /areas SECURITYPOLICY | Out-Null
                      Start-Sleep -Seconds 3
                      Write-Host "Password complexity disabled (locally). Retrying user creation."
                      $ok = Ensure-NetUser -u $username -p $plainPass
                  } else {
                      Write-Warning "PasswordComplexity not found in exported file; skipping direct secedit tweak."
                  }
              } else {
                  Write-Warning "Failed to export security policy for modification."
              }
          }

          if (-not $ok) {
              Write-Error "Failed to create/update user $username even after attempting policy tweak. Exiting."
              exit 1
          }

          Write-Host "User created/updated via net user."

          # Add to groups
          try {
              net localgroup Administrators $username /add
          } catch {}
          try {
              net localgroup "Remote Desktop Users" $username /add
          } catch {}

          # Try to set password never expires using Set-LocalUser (best-effort; may require admin module)
          try {
              $securePass = ConvertTo-SecureString $plainPass -AsPlainText -Force
              if (Get-Command Set-LocalUser -ErrorAction SilentlyContinue) {
                  Set-LocalUser -Name $username -PasswordNeverExpires $true -ErrorAction SilentlyContinue
              }
          } catch {}

          # Export creds to env for later steps (visible in logs; WARNING)
          echo "RDP_CREDS=User: $username | Password: $plainPass" >> $env:GITHUB_ENV
          Write-Host "User $username ready."

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"

          Write-Host "Downloading Tailscale installer..."
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Write-Host "Installing Tailscale (msi)..."
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          Write-Host "Tailscale installed."

      - name: Establish Tailscale Connection (hardcoded authkey)
        shell: pwsh
        run: |
          # ***** HARDCODED AUTH KEY (INSECURE) *****
          $authKey = "tskey-auth-kMdmzAe9er11CNTRL-HbEZn81BopT5QTQn1dXHpT2BjJzdxiuy"

          $tailscaleExe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
          if (-not (Test-Path $tailscaleExe)) {
              Write-Error "Tailscale executable not found at $tailscaleExe"
              exit 1
          }

          Write-Host "Bringing up tailscale..."
          & $tailscaleExe up --authkey=$authKey --hostname=gh-runner-$env:GITHUB_RUN_ID

          # Wait for Tailscale IPv4
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
              $tsIP = & $tailscaleExe ip -4
              $tsIP = $tsIP.Trim()
              if ($tsIP) { break }
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned after retries. Exiting."
              exit 1
          }

          Write-Host "Tailscale IP detected: $tsIP"
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          Write-Host "Testing TCP connectivity to $env:TAILSCALE_IP:3389 ..."
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed (Test-NetConnection result: $($testResult | Out-String))."
              exit 1
          }
          Write-Host "TCP connectivity to RDP port confirmed."

      - name: Maintain Connection (display credentials)
        shell: pwsh
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: Mpragans"
          Write-Host "Password: 123456"
          Write-Host "==================`n"

          # Keep runner active until workflow is manually cancelled
          while ($true) {
              Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] RDP Active - use Cancel workflow to terminate"
              Start-Sleep -Seconds 300
          }
